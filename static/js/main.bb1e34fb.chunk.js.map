{"version":3,"sources":["components/navbar.jsx","components/post.jsx","actions/actions.js","components/posts.jsx","components/container.jsx","components/formGroup.jsx","components/editPosts.jsx","components/addPosts.jsx","App.js","reducers/crudReducer.js","reducers/index.js","serviceWorker.js","index.js","store.js"],"names":["Navbar","className","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","to","Component","Post","liked","disliked","displayTime","post","updatedTime","postedTime","goDislike","props","onDislike","onLike","goLike","this","name","postHeader","onClick","icon","faThumbsUp","likes","faThumbsDown","dislikes","onDelete","ADD_POST","DEL_POST","UPDATEPOST","LIKE_CHANGE","DISLIKE_CHANGE","Posts","deletePost","postId","dispatch","payload","handleLike","value","handleDislike","posts","map","p","key","connect","state","crud","Container","FormGroup","handleInput","setState","console","log","labelText","htmlFor","placeholder","onChange","e","target","FormGroupTextArea","rows","cols","EditPost","updatePost","PostId","getId","match","params","getPost","find","c","inputType","AddPost","publishPost","App","Fragment","path","component","exact","initialState","combineReducers","action","filter","index","indexOf","Boolean","window","location","hostname","store","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RA0CeA,E,iLAtCX,OACE,yBAAKC,UAAU,mDACb,wBAAIA,UAAU,gBAAd,gBACA,4BACEA,UAAU,iBACVC,KAAK,SACLC,cAAY,WACZC,cAAY,qBACZC,gBAAc,oBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMN,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BO,GAAG,qBAC3C,wBAAIP,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMQ,GAAG,KACP,wBAAIR,UAAU,YAAd,WAGJ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMQ,GAAG,QACP,wBAAIR,UAAU,YAAd,SAGJ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMQ,GAAG,KACP,wBAAIR,UAAU,YAAd,iB,GA9BKS,a,gBC4FNC,E,2MAxFbC,MAAQ,E,EACRC,SAAW,E,EACXC,YAAc,SAAAC,GACZ,MAAyB,KAArBA,EAAKC,YACA,aAAeD,EAAKE,WAEpB,cAAgBF,EAAKC,a,EAIhCE,UAAY,WACY,IAAlB,EAAKL,UACP,EAAKA,SAAW,EAChB,EAAKM,MAAMC,UAAU,GACjB,EAAKR,QACP,EAAKA,MAAQ,EACb,EAAKO,MAAME,QAAQ,MAGrB,EAAKR,SAAW,EAChB,EAAKM,MAAMC,WAAW,K,EAI1BE,OAAS,WACY,IAAf,EAAKV,OACP,EAAKA,MAAQ,EACb,EAAKO,MAAME,OAAO,GACd,EAAKR,WACP,EAAKA,SAAW,EAChB,EAAKM,MAAMC,WAAW,MAGxB,EAAKR,MAAQ,EACb,EAAKO,MAAME,QAAQ,K,wEAIb,IACAN,EAASQ,KAAKJ,MAAdJ,KACR,OACE,yBAAKd,UAAU,YACb,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,2BACZc,EAAKS,KADR,MACiBD,KAAKT,YAAYC,IAElC,yBAAKd,UAAU,0BACb,wBAAIA,UAAU,cAAcc,EAAKU,YACjC,uBAAGxB,UAAU,aAAac,EAAKA,OAEjC,yBAAKd,UAAU,uDACb,4BACEC,KAAK,SACLwB,QAASH,KAAKD,OACdrB,UAAU,mBAEV,kBAAC,IAAD,CAAiB0B,KAAMC,MALzB,OAMSb,EAAKc,OAEd,4BACE3B,KAAK,SACLwB,QAASH,KAAKL,UACdjB,UAAU,kBAEV,kBAAC,IAAD,CAAiB0B,KAAMG,MALzB,OAMSf,EAAKgB,UAEd,yBAAK9B,UAAU,eACb,kBAAC,IAAD,CAAMQ,GAAI,cAAgBM,EAAKP,IAC7B,4BAAQN,KAAK,SAASD,UAAU,gBAAhC,SAIF,4BACEC,KAAK,SACLwB,QAASH,KAAKJ,MAAMa,SACpB/B,UAAU,kBAHZ,kB,GA1EKS,a,QCLNuB,EAAW,UACXC,EAAW,UACXC,EAAa,aACbC,EAAc,cACdC,EAAiB,iBCCxBC,E,2MACJC,WAAa,SAAAC,GACX,EAAKrB,MAAMsB,SAAS,CAClBvC,KAAMgC,EACNQ,QAAS,CAAEF,a,EAIfG,WAAa,SAAC5B,EAAM6B,GAClB,EAAKzB,MAAMsB,SAAS,CAClBvC,KAAMkC,EACNM,QAAS,CAAE3B,OAAM6B,Y,EAIrBC,cAAgB,SAAC9B,EAAM6B,GACrB,EAAKzB,MAAMsB,SAAS,CAClBvC,KAAMmC,EACNK,QAAS,CAAE3B,OAAM6B,Y,wEAIX,IAAD,OACP,OACE,yBAAK3C,UAAU,8BACZsB,KAAKJ,MAAM2B,MAAMC,KAAI,SAAAC,GAAC,OACrB,kBAAC,EAAD,CACEC,IAAKD,EAAExC,GACPO,KAAMiC,EACNhB,SAAU,kBAAM,EAAKO,WAAWS,EAAExC,KAClCa,OAAQ,SAAAuB,GAAK,OAAI,EAAKD,WAAWK,EAAGJ,IACpCxB,UAAW,SAAAwB,GAAK,OAAI,EAAKC,cAAcG,EAAGJ,c,GA/BlClC,aA4CLwC,mBALf,SAAyBC,GACvB,MAAO,CACLL,MAAOK,EAAMC,KAAKN,SAGPI,CAAyBZ,GClCzBe,E,iLAVX,OACE,yBAAKpD,UAAU,aACb,6BACA,6BACA,kBAAC,EAAD,W,GANgBS,a,ilBCFjB,IAAM4C,EAAb,YACE,WAAYnC,GAAQ,IAAD,8BACjB,4CAAMA,KAMRoC,YAAc,SAAAX,GACZ,EAAKY,SAAS,CAAEZ,WANhB,EAAKO,MAAQ,CACXP,MAAOzB,EAAMyB,OAHE,EADrB,sEAYY,IAAD,OACPa,QAAQC,IAAInC,KAAKJ,OADV,WAEiCI,KAAKJ,OAArCK,EAFD,EAECA,KAAMmC,EAFP,EAEOA,UAAWf,EAFlB,EAEkBA,MACzB,OACE,yBAAK3C,UAAU,kBACb,2BAAO2D,QAASpC,EAAMvB,UAAU,2BAC7B0D,GAEH,yBAAK1D,UAAU,YACb,2BACEuB,KAAMA,EACNvB,UAAU,eACVO,GAAIgB,EACJqC,YAAaF,EACbf,MAAOA,EACPkB,SAAU,SAAAC,GAAC,OAAI,EAAKR,YAAYQ,EAAEC,OAAOpB,gBA3BrD,GAA+BlC,aAmClBuD,EAAb,YACE,WAAY9C,GAAQ,IAAD,8BACjB,4CAAMA,KAMRoC,YAAc,SAAAX,GACZ,EAAKY,SAAS,CAAEZ,WANhB,EAAKO,MAAQ,CACXP,MAAOzB,EAAMyB,OAHE,EADrB,sEAYY,IAAD,cACiCrB,KAAKJ,OAArCK,EADD,EACCA,KAAMmC,EADP,EACOA,UAAWf,EADlB,EACkBA,MACzB,OACE,yBAAK3C,UAAU,kBACb,2BAAO2D,QAASpC,EAAMvB,UAAU,2BAC7B0D,GAEH,yBAAK1D,UAAU,YACb,8BACEiE,KAAK,IACLC,KAAK,KACL3C,KAAMA,EACNvB,UAAU,eACVO,GAAIgB,EACJqC,YAAaF,EACbf,MAAOA,EACPkB,SAAU,SAAAC,GAAC,OAAI,EAAKR,YAAYQ,EAAEC,OAAOpB,gBA5BrD,GAAuClC,aC/BjC0D,E,2MACJC,WAAa,SAAAC,K,wEACH,IAAD,OACHC,EAAQhD,KAAKJ,MAAMqD,MAAMC,OAAOjE,GAChCkE,EAAUnD,KAAKJ,MAAM2B,MAAM6B,MAAK,SAAAC,GAAC,OAAIA,EAAEpE,IAAM+D,KACjD,OACE,yBAAKtE,UAAU,aACb,6BACA,6BACA,8BACE,kBAAC,EAAD,CACEuB,KAAK,WACLmC,UAAU,gBACVkB,UAAU,OACVjC,MAAO8B,EAAQlD,OAEjB,kBAAC,EAAD,CACEA,KAAK,aACLmC,UAAU,sBACVkB,UAAU,OACVjC,MAAO8B,EAAQjD,aAEjB,kBAAC,EAAD,CACED,KAAK,cACLmC,UAAU,eACVkB,UAAU,WACVjC,MAAO8B,EAAQ3D,OAEjB,4BACEb,KAAK,SACLD,UAAU,kBACVyB,QAAS,kBAAM,EAAK2C,WAAWK,EAAQlE,MAHzC,UAOA,4BAAQN,KAAK,SAASD,UAAU,qBAAhC,e,GAnCaS,aAiDRwC,mBALf,SAAyBC,GACvB,MAAO,CACLL,MAAOK,EAAMC,KAAKN,SAGPI,CAAyBkB,GClDlCU,E,2MACJC,YAAc,a,wEACJ,IAAD,OACP,OACE,yBAAK9E,UAAU,aACb,6BACA,6BACA,8BACE,kBAAC,EAAD,CACEuB,KAAK,WACLmC,UAAU,gBACVkB,UAAU,SAEZ,kBAAC,EAAD,CACErD,KAAK,aACLmC,UAAU,sBACVkB,UAAU,SAEZ,kBAAC,EAAD,CACErD,KAAK,cACLmC,UAAU,eACVkB,UAAU,aAEZ,4BACE3E,KAAK,SACLwB,QAAS,kBAAM,EAAKqD,aACpB9E,UAAU,mBAHZ,OAOA,4BAAQC,KAAK,SAASD,UAAU,qBAAhC,e,GA9BYS,aA4CPwC,mBALf,SAAyBC,GACvB,MAAO,CACLL,MAAOK,EAAMC,KAAKN,SAGPI,CAAyB4B,G,kCCrBzBE,MAff,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,oBAAoBC,UAAW9B,IAC3C,kBAAC,IAAD,CAAO6B,KAAK,kBAAkBC,UAAWL,IACzC,kBAAC,IAAD,CAAOI,KAAK,4BAA4BC,UAAWf,IACnD,kBAAC,IAAD,CAAOc,KAAK,eAAeE,OAAK,EAACD,UAAW9B,IAC5C,kBAAC,IAAD,CAAU5C,GAAG,oB,ylBCbrB,IAAM4E,EAAe,CACnBvC,MAAO,CACL,CACEtC,GAAI,EACJgB,KAAM,WACNP,WAAY,yBACZD,YAAa,GACbD,KAAM,2BACNU,WAAY,oBACZI,MAAO,EACPE,SAAU,GAEZ,CACEvB,GAAI,EACJgB,KAAM,WACNP,WAAY,yBACZD,YAAa,GACbD,KAAM,sCACNU,WAAY,cACZI,MAAO,EACPE,SAAU,GAEZ,CACEvB,GAAI,EACJgB,KAAM,WACNP,WAAY,yBACZD,YAAa,GACbD,KACE,qFACFU,WAAY,YACZI,MAAO,EACPE,SAAU,GAEZ,CACEvB,GAAI,EACJgB,KAAM,WACNP,WAAY,yBACZD,YAAa,GACbD,KAAM,2DACNU,WAAY,gBACZI,MAAO,EACPE,SAAU,KC9CDuD,kBAAgB,CAC7BlC,KDkDa,WAAoD,IAA/BD,EAA8B,uDAAtBkC,EAAcE,EAAQ,uCAChE,OAAQA,EAAOrF,MACb,KAAK+B,EACH,OAAOkB,EACT,KAAKjB,EACH,IAAIY,EAAQK,EAAML,MAAM0C,QAAO,SAAAxC,GAAC,OAAIA,EAAExC,KAAO+E,EAAO7C,QAAQF,UAC5D,OAAO,KACFW,EADL,CAEEL,UAEJ,KAAKX,EACH,OAAOgB,EACT,KAAKf,EACH,IACIqD,GADA3C,EAAK,YAAOK,EAAML,QACJ4C,QAAQH,EAAO7C,QAAQ3B,MAEzC,OADA+B,EAAM2C,GAAN,MAAwB3C,EAAM2C,GAAN,MAAwBF,EAAO7C,QAAQE,MACxD,KACFO,EADL,CAEEL,UAEJ,KAAKT,EAECoD,GADA3C,EAAK,YAAOK,EAAML,QACJ4C,QAAQH,EAAO7C,QAAQ3B,MAGzC,OAFA+B,EAAM2C,GAAN,SACE3C,EAAM2C,GAAN,SAA2BF,EAAO7C,QAAQE,MACrC,KACFO,EADL,CAEEL,UAEJ,QACE,OAAOK,MExEOwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAStB,MACvB,2DCTN,IAAMuB,ECLGC,YAAYC,GDMrBC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,EAAD,QAGJK,SAASC,eAAe,SDiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb1e34fb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar sticky-top navbar-expand-lg navbar-light\">\n        <h2 className=\"navbar-brand\">React - CRUD</h2>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-toggle=\"collapse\"\n          data-target=\"#navbarNavDropdown\"\n          aria-controls=\"navbarNavDropdown\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav\">\n            <li className=\"nav-item\">\n              <Link to=\"/\">\n                <h4 className=\"nav-link\">Posts</h4>\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/add\">\n                <h4 className=\"nav-link\">Add</h4>\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to=\"/\">\n                <h4 className=\"nav-link\">Sort</h4>\n              </Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Link } from \"react-router-dom\";\nimport { faThumbsUp, faThumbsDown } from \"@fortawesome/free-solid-svg-icons\";\n\nclass Post extends Component {\n  liked = 0;\n  disliked = 0;\n  displayTime = post => {\n    if (post.updatedTime === \"\") {\n      return \"Posted at \" + post.postedTime;\n    } else {\n      return \"Updated at \" + post.updatedTime;\n    }\n  };\n\n  goDislike = () => {\n    if (this.disliked === 0) {\n      this.disliked = 1;\n      this.props.onDislike(1);\n      if (this.liked) {\n        this.liked = 0;\n        this.props.onLike(-1);\n      }\n    } else {\n      this.disliked = 0;\n      this.props.onDislike(-1);\n    }\n  };\n\n  goLike = () => {\n    if (this.liked === 0) {\n      this.liked = 1;\n      this.props.onLike(1);\n      if (this.disliked) {\n        this.disliked = 0;\n        this.props.onDislike(-1);\n      }\n    } else {\n      this.liked = 0;\n      this.props.onLike(-1);\n    }\n  };\n\n  render() {\n    const { post } = this.props;\n    return (\n      <div className=\"col-lg-8\">\n        <div className=\"card border-primary mb-3\">\n          <div className=\"card-header text-center\">\n            {post.name} - {this.displayTime(post)}\n          </div>\n          <div className=\"card-body text-primary\">\n            <h5 className=\"card-title\">{post.postHeader}</h5>\n            <p className=\"card-text\">{post.post}</p>\n          </div>\n          <div className=\"card-footer bg-transparent border-primary text-left\">\n            <button\n              type=\"button\"\n              onClick={this.goLike}\n              className=\"btn btn-success\"\n            >\n              <FontAwesomeIcon icon={faThumbsUp} />\n              &nbsp;{post.likes}\n            </button>\n            <button\n              type=\"button\"\n              onClick={this.goDislike}\n              className=\"btn btn-danger\"\n            >\n              <FontAwesomeIcon icon={faThumbsDown} />\n              &nbsp;{post.dislikes}\n            </button>\n            <div className=\"float-right\">\n              <Link to={\"/post/edit/\" + post.id}>\n                <button type=\"button\" className=\"btn btn-info\">\n                  Edit\n                </button>\n              </Link>\n              <button\n                type=\"button\"\n                onClick={this.props.onDelete}\n                className=\"btn btn-danger\"\n              >\n                Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Post;\n","export const ADD_POST = \"ADDPOST\";\nexport const DEL_POST = \"DELPOST\";\nexport const UPDATEPOST = \"UPDATEPOST\";\nexport const LIKE_CHANGE = \"LIKE_CHANGE\";\nexport const DISLIKE_CHANGE = \"DISLIKE_CHANGE\";\n","import React, { Component } from \"react\";\nimport Post from \"./post\";\nimport { connect } from \"react-redux\";\nimport { DEL_POST, LIKE_CHANGE, DISLIKE_CHANGE } from \"../actions/actions\";\n\nclass Posts extends Component {\n  deletePost = postId => {\n    this.props.dispatch({\n      type: DEL_POST,\n      payload: { postId }\n    });\n  };\n\n  handleLike = (post, value) => {\n    this.props.dispatch({\n      type: LIKE_CHANGE,\n      payload: { post, value }\n    });\n  };\n\n  handleDislike = (post, value) => {\n    this.props.dispatch({\n      type: DISLIKE_CHANGE,\n      payload: { post, value }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"row justify-content-center\">\n        {this.props.posts.map(p => (\n          <Post\n            key={p.id}\n            post={p}\n            onDelete={() => this.deletePost(p.id)}\n            onLike={value => this.handleLike(p, value)}\n            onDislike={value => this.handleDislike(p, value)}\n          />\n        ))}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    posts: state.crud.posts\n  };\n}\nexport default connect(mapStateToProps)(Posts);\n","import React, { Component } from \"react\";\nimport Posts from \"./posts\";\n\nclass Container extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <br />\n        <br />\n        <Posts />\n      </div>\n    );\n  }\n}\n\nexport default Container;\n","import React, { Component } from \"react\";\nexport class FormGroup extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n\n  handleInput = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    console.log(this.props);\n    const { name, labelText, value } = { ...this.props };\n    return (\n      <div className=\"form-group row\">\n        <label htmlFor={name} className=\"col-sm-2 col-form-label\">\n          {labelText}\n        </label>\n        <div className=\"col-sm-6\">\n          <input\n            name={name}\n            className=\"form-control\"\n            id={name}\n            placeholder={labelText}\n            value={value}\n            onChange={e => this.handleInput(e.target.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport class FormGroupTextArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n\n  handleInput = value => {\n    this.setState({ value });\n  };\n\n  render() {\n    const { name, labelText, value } = { ...this.props };\n    return (\n      <div className=\"form-group row\">\n        <label htmlFor={name} className=\"col-sm-2 col-form-label\">\n          {labelText}\n        </label>\n        <div className=\"col-sm-6\">\n          <textarea\n            rows=\"5\"\n            cols=\"50\"\n            name={name}\n            className=\"form-control\"\n            id={name}\n            placeholder={labelText}\n            value={value}\n            onChange={e => this.handleInput(e.target.value)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { FormGroup, FormGroupTextArea } from \"./formGroup\";\nimport { connect } from \"react-redux\";\nimport { UPDATEPOST } from \"../actions/actions\";\n\nclass EditPost extends Component {\n  updatePost = PostId => {};\n  render() {\n    var getId = this.props.match.params.id;\n    var getPost = this.props.posts.find(c => c.id == getId);\n    return (\n      <div className=\"container\">\n        <br />\n        <br />\n        <form>\n          <FormGroup\n            name=\"username\"\n            labelText=\"Your Username\"\n            inputType=\"text\"\n            value={getPost.name}\n          />\n          <FormGroup\n            name=\"postHeader\"\n            labelText=\"Header of your post\"\n            inputType=\"text\"\n            value={getPost.postHeader}\n          />\n          <FormGroupTextArea\n            name=\"postContent\"\n            labelText=\"Post Content\"\n            inputType=\"textarea\"\n            value={getPost.post}\n          />\n          <button\n            type=\"submit\"\n            className=\"btn btn-success\"\n            onClick={() => this.updatePost(getPost.id)}\n          >\n            Update\n          </button>\n          <button type=\"submit\" className=\"btn btn-secondary\">\n            reset\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    posts: state.crud.posts\n  };\n}\nexport default connect(mapStateToProps)(EditPost);\n","import React, { Component } from \"react\";\nimport { FormGroup, FormGroupTextArea } from \"./formGroup\";\nimport { connect } from \"react-redux\";\n\nclass AddPost extends Component {\n  publishPost = () => {};\n  render() {\n    return (\n      <div className=\"container\">\n        <br />\n        <br />\n        <form>\n          <FormGroup\n            name=\"username\"\n            labelText=\"Your Username\"\n            inputType=\"text\"\n          />\n          <FormGroup\n            name=\"postHeader\"\n            labelText=\"Header of your post\"\n            inputType=\"text\"\n          />\n          <FormGroupTextArea\n            name=\"postContent\"\n            labelText=\"Post Content\"\n            inputType=\"textarea\"\n          />\n          <button\n            type=\"submit\"\n            onClick={() => this.publishPost}\n            className=\"btn btn-success\"\n          >\n            Add\n          </button>\n          <button type=\"submit\" className=\"btn btn-secondary\">\n            clear\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state) {\n  return {\n    posts: state.crud.posts\n  };\n}\nexport default connect(mapStateToProps)(AddPost);\n","import React from \"react\";\nimport Navbar from \"./components/navbar\";\nimport Container from \"./components/container\";\nimport EditPost from \"./components/editPosts\";\nimport AddPost from \"./components/addPosts\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport \"../node_modules/jquery/dist/jquery.min.js\";\nimport \"../node_modules/bootstrap/dist/js/bootstrap.min.js\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Navbar />\n      <Switch>\n        <Route path=\"/crud-react/posts\" component={Container} />\n        <Route path=\"/crud-react/add\" component={AddPost} />\n        <Route path=\"/crud-react/post/edit/:id\" component={EditPost} />\n        <Route path=\"/crud-react/\" exact component={Container} />\n        <Redirect to=\"/crud-react/\" />\n      </Switch>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import {\n  ADD_POST,\n  DEL_POST,\n  UPDATEPOST,\n  LIKE_CHANGE,\n  DISLIKE_CHANGE\n} from \"../actions/actions\";\n\nconst initialState = {\n  posts: [\n    {\n      id: 1,\n      name: \"Santhosh\",\n      postedTime: \"12/27/2019, 4:10:39 AM\",\n      updatedTime: \"\",\n      post: \"Hi This is my first post\",\n      postHeader: \"Introduction post\",\n      likes: 0,\n      dislikes: 0\n    },\n    {\n      id: 2,\n      name: \"Santhosh\",\n      postedTime: \"12/27/2019, 4:10:39 AM\",\n      updatedTime: \"\",\n      post: \"Hola Amigos, This is my second post\",\n      postHeader: \"Second post\",\n      likes: 0,\n      dislikes: 0\n    },\n    {\n      id: 3,\n      name: \"Santhosh\",\n      postedTime: \"12/27/2019, 4:10:39 AM\",\n      updatedTime: \"\",\n      post:\n        \"Standing still is the fastest way of moving backwards, in a rapidly changing world\",\n      postHeader: \"Cool post\",\n      likes: 0,\n      dislikes: 0\n    },\n    {\n      id: 4,\n      name: \"Santhosh\",\n      postedTime: \"12/27/2019, 4:10:39 AM\",\n      updatedTime: \"\",\n      post: \"Vanity cards are always interest one But this is not it.\",\n      postHeader: \"Vanity cards?\",\n      likes: 0,\n      dislikes: 0\n    }\n  ]\n};\n\nexport default function crudReducer(state = initialState, action) {\n  switch (action.type) {\n    case ADD_POST:\n      return state;\n    case DEL_POST:\n      var posts = state.posts.filter(p => p.id !== action.payload.postId);\n      return {\n        ...state,\n        posts\n      };\n    case UPDATEPOST:\n      return state;\n    case LIKE_CHANGE:\n      var posts = [...state.posts];\n      var index = posts.indexOf(action.payload.post);\n      posts[index][\"likes\"] = posts[index][\"likes\"] + action.payload.value;\n      return {\n        ...state,\n        posts\n      };\n    case DISLIKE_CHANGE:\n      var posts = [...state.posts];\n      var index = posts.indexOf(action.payload.post);\n      posts[index][\"dislikes\"] =\n        posts[index][\"dislikes\"] + action.payload.value;\n      return {\n        ...state,\n        posts\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport crudReducer from \"./crudReducer\";\n\nexport default combineReducers({\n  crud: crudReducer\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport configureStore from \"./store\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\n\nexport default function configureStore() {\n  return createStore(rootReducer);\n}\n"],"sourceRoot":""}